openapi: 3.0.3
info:
  title: Employee Management System API
  version: 1.0.0
  description: API documentation for the Employee Management System

servers:
  - url: http://localhost:5000/api

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Departments
    description: Department management
  - name: positions
    description: position management
  - name: Skills
    description: Skill management
  - name: Employees
    description: Employee management

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Engineering"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    position:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Software Engineer"
        department:
          type: integer
          example: 1
        skills:
          type: array
          items:
            type: string
          example: ["60f7e7e7e7e7e7e7e7e7e7e1"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Skill:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "JavaScript"
        category:
          type: string
          example: "technical"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Employee:
      type: object
      properties:
        serialId:
          type: integer
          example: 1001
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        phones:
          type: array
          items:
            type: string
          example: ["+1234567890"]
        department:
          type: string
          example: "60f7e7e7e7e7e7e7e7e7e7e1"
        position:
          type: string
          example: "60f7e7e7e7e7e7e7e7e7e7e2"
        skills:
          type: array
          items:
            type: string
          example: ["60f7e7e7e7e7e7e7e7e7e7e3"]
        availability:
          type: string
          enum: ["available", "busy", "on_leave"]
          example: "available"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Department not found"

paths:
  # ===== Departments =====
  /departments:
    get:
      tags: [Departments]
      summary: Get all departments
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of departments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Department"
    post:
      tags: [Departments]
      summary: Create a new department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Engineering"
      responses:
        "201":
          description: Department created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Department"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /departments/{id}:
    get:
      tags: [Departments]
      summary: Get a department by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Department details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Department"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags: [Departments]
      summary: Update a department
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Engineering Department"
      responses:
        "200":
          description: Department updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Department"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Departments]
      summary: Delete a department
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Department deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Department deleted"
        "400":
          description: Bad request (department has positions)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # ===== positions =====
  /positions/department/{departmentId}:
    get:
      tags: [positions]
      summary: Get positions by department
      security:
        - bearerAuth: []
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of positions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Software Engineer"
                        skills:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string

  /positions:
    post:
      tags: [positions]
      summary: Create a new position
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - departmentId
                - skillIds
              properties:
                name:
                  type: string
                  example: "Software Engineer"
                departmentId:
                  type: integer
                  example: 1
                skillIds:
                  type: array
                  items:
                    type: string
                  example: ["60f7e7e7e7e7e7e7e7e7e7e1"]
      responses:
        "201":
          description: position created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/position"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /positions/{id}:
    get:
      tags: [positions]
      summary: Get a position by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: position details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/position"
        "404":
          description: position not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags: [positions]
      summary: Update a position
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Senior Software Engineer"
                departmentId:
                  type: integer
                  example: 1
                skillIds:
                  type: array
                  items:
                    type: string
                  example: ["60f7e7e7e7e7e7e7e7e7e7e1"]
      responses:
        "200":
          description: position updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/position"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: position not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [positions]
      summary: Delete a position
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: position deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "position deleted"
        "400":
          description: Bad request (position has employees)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: position not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # ===== Skills =====
  /skills:
    get:
      tags: [Skills]
      summary: Get all skills
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of skills
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Skill"
    post:
      tags: [Skills]
      summary: Create a new skill
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "JavaScript"
                category:
                  type: string
                  example: "technical"
      responses:
        "201":
          description: Skill created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Skill"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /skills/{id}:
    get:
      tags: [Skills]
      summary: Get a skill by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Skill details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Skill"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags: [Skills]
      summary: Update a skill
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "JavaScript ES6+"
                category:
                  type: string
                  example: "technical"
      responses:
        "200":
          description: Skill updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Skill"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Skills]
      summary: Delete a skill
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Skill deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Skill deleted"
        "400":
          description: Bad request (skill assigned to positions)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # ===== Employees =====
  /employees:
    get:
      tags: [Employees]
      summary: Get all employees (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: department
          in: query
          schema:
            type: string
        - name: position
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: availability
          in: query
          schema:
            type: string
            enum: [available, busy, on_leave]
      responses:
        "200":
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
                  pages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Employee"
    post:
      tags: [Employees]
      summary: Create a new employee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - phones
                - department
                - position
                - skills
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john@example.com"
                phones:
                  type: array
                  items:
                    type: string
                  example: ["+1234567890"]
                department:
                  type: string
                  example: "60f7e7e7e7e7e7e7e7e7e7e1"
                position:
                  type: string
                  example: "60f7e7e7e7e7e7e7e7e7e7e2"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["60f7e7e7e7e7e7e7e7e7e7e3"]
                availability:
                  type: string
                  enum: [available, busy, on_leave]
                  example: "available"
      responses:
        "201":
          description: Employee created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Employee"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Department or position not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /employees/department/{departmentId}:
    get:
      tags: [Employees]
      summary: Get employees by department
      security:
        - bearerAuth: []
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of employees in department
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 5
                  total:
                    type: integer
                    example: 25
                  pages:
                    type: integer
                    example: 5
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Employee"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /employees/{id}:
    get:
      tags: [Employees]
      summary: Get an employee by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Employee details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Employee"
        "403":
          description: Forbidden (not authorized)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags: [Employees]
      summary: Update an employee
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe Jr."
                email:
                  type: string
                  example: "john.jr@example.com"
                phones:
                  type: array
                  items:
                    type: string
                  example: ["+1234567890", "+9876543210"]
                department:
                  type: string
                  example: "60f7e7e7e7e7e7e7e7e7e7e1"
                position:
                  type: string
                  example: "60f7e7e7e7e7e7e7e7e7e7e2"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["60f7e7e7e7e7e7e7e7e7e7e3"]
                availability:
                  type: string
                  enum: [available, busy, on_leave]
                  example: "busy"
      responses:
        "200":
          description: Employee updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Employee"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden (not authorized)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Employees]
      summary: Delete (deactivate) an employee
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Employee deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Employee deactivated successfully"
        "403":
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

security:
  - bearerAuth: []
