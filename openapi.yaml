openapi: 3.0.3
info:
  title: Glitci Finance Tracker API
  version: 1.0.0
  description: API documentation for the Project Management System

servers:
  - url: http://localhost:5000/api

tags:
  - name: Auth
    description: Endpoints for user authentication and authorization
  - name: Users
    description: Endpoints for managing users
  - name: Employees
    description: Endpoints for managing employees
  - name: Departments
    description: Endpoints for managing departments and their roles
  - name: Projects
    description: Endpoints for managing projects
  - name: Finance
    description: Endpoints for analytics and financial operations
  - name: Services
    description: Endpoints for managing services

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, manager, employee]
    Employee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phones:
          type: array
          items:
            type: string
        department:
          type: string
        position:
          type: string
        skills:
          type: array
          items:
            type: string
        availability:
          type: string
          enum: [available, busy, on_leave]
        isActive:
          type: boolean
    Department:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        roles:
          type: array
          items:
            type: string
        services:
          type: array
          items:
            type: string
    Project:
      type: object
      properties:
        id:
          type: string
        projectName:
          type: string
        employees:
          type: array
          items:
            type: object
            properties:
              employee: { type: string }
              role: { type: string }
              assignedAt: { type: string, format: date-time }
        budget:
          type: number
        deposit:
          type: number
        installments:
          type: array
          items:
            $ref: "#/components/schemas/Installment"
        client:
          type: string
        services:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [planning, in_progress, completed, cancelled]
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        deliverables:
          type: array
          items:
            type: string
        notes:
          type: string
        totalPaid:
          type: number
        completionRate:
          type: string
    Installment:
      type: object
      properties:
        method:
          type: string
          enum: [cash, bank_transfer, check, card]
        amount:
          type: number
        createdAt:
          type: string
          format: date-time
        description:
          type: string

paths:
  # === Authentication ===
  api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                role: { type: string }
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  user:
                    $ref: "#/components/schemas/User"
                  accessToken: { type: string }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  user:
                    $ref: "#/components/schemas/User"
                  accessToken: { type: string }

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: "#/components/schemas/User"

  /auth/change-password:
    patch:
      tags: [Auth]
      summary: Change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword: { type: string }
                newPassword: { type: string }
      responses:
        "200":
          description: Password changed

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string }
      responses:
        "200":
          description: Email sent

  /auth/reset-password/{resettoken}:
    put:
      tags: [Auth]
      summary: Reset password
      parameters:
        - name: resettoken
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password: { type: string }
      responses:
        "200":
          description: Password reset successful

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      responses:
        "200":
          description: Refreshed access token

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful

  # === Users ===
  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  # === Employees ===
  /employees:
    get:
      tags: [Employees]
      summary: Get all employees (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer }
        - name: limit
          in: query
          schema: { type: integer }
      responses:
        "200":
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  count: { type: integer }
                  total: { type: integer }
                  page: { type: integer }
                  pages: { type: integer }
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Employee"
    post:
      tags: [Employees]
      summary: Create new employee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "201":
          description: Employee created

  /employees/{id}:
    get:
      tags: [Employees]
      summary: Get single employee
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Employee found
    patch:
      tags: [Employees]
      summary: Update employee
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "200":
          description: Employee updated
    delete:
      tags: [Employees]
      summary: Soft delete employee
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Employee deactivated

  # === Departments ===
  /departments:
    get:
      tags: [Departments]
      summary: Get all departments
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all departments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Department"
    post:
      tags: [Departments]
      summary: Create a new department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the department
                  example: HR
                roles:
                  type: array
                  items:
                    type: string
                  description: List of roles in this department
                  example: ["recruiter", "talent manager"]
                services:
                  type: array
                  items:
                    type: string
                  description: List of service IDs provided by this department
                  example: ["60f7e7e7e7e7e7e7e7e7e7e1"]
      responses:
        "201":
          description: Department created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: "#/components/schemas/Department"
        "400":
          description: Bad request (e.g., missing name)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }

  /departments/{id}:
    get:
      tags: [Departments]
      summary: Get a single department by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: ID of the department to retrieve
      responses:
        "200":
          description: Department found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: "#/components/schemas/Department"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
    patch:
      tags: [Departments]
      summary: Update an existing department
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: ID of the department to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the department
                  example: Human Resources
                roles:
                  type: array
                  items:
                    type: string
                  description: New list of roles for the department
                  example: ["recruiter", "onboarding specialist"]
                services:
                  type: array
                  items:
                    type: string
                  description: New list of service IDs provided by this department
                  example: ["60f7e7e7e7e7e7e7e7e7e7e3"]
      responses:
        "200":
          description: Department updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: "#/components/schemas/Department"
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
    delete:
      tags: [Departments]
      summary: Delete a department by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: ID of the department to delete
      responses:
        "200":
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }

  /departments/{id}/roles:
    get:
      tags: [Departments]
      summary: Get roles for a specific department by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: ID of the department
      responses:
        "200":
          description: Roles for the specified department
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      department: { type: string }
                      roles:
                        type: array
                        items:
                          type: string
        "404":
          description: Department not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }

  # === Projects ===
  /projects:
    get:
      tags: [Projects]
      summary: Get all projects (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer }
        - name: limit
          in: query
          schema: { type: integer }
      responses:
        "200":
          description: List of projects
    post:
      tags: [Projects]
      summary: Create new project
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Project created

  /projects/{id}:
    get:
      tags: [Projects]
      summary: Get single project
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Project found
    put:
      tags: [Projects]
      summary: Update project
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project updated
    delete:
      tags: [Projects]
      summary: Delete project
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Project deleted

  /projects/{id}/installments:
    post:
      tags: [Projects]
      summary: Add installment to project
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Installment"
      responses:
        "200":
          description: Installment added

  /projects/{id}/financials:
    get:
      tags: [Projects]
      summary: Get project financial details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Project financials

  /projects/stats/total-count:
    get:
      tags: [Projects]
      summary: Get total count of projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Total count

  /projects/stats/total-revenue:
    get:
      tags: [Projects]
      summary: Get total revenue from all projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Total revenue

  /projects/stats/total-expenses:
    get:
      tags: [Projects]
      summary: Get total expenses from all projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Total expenses

  /projects/stats/finished-count:
    get:
      tags: [Projects]
      summary: Get total count of finished projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Finished count

  /projects/stats/active-count:
    get:
      tags: [Projects]
      summary: Get total count of active projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Active count

  # === Finance ===
  /finance/analytics:
    get:
      tags: [Finance]
      summary: Get overall financial analytics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Financial analytics

  /finance/services/{category}:
    get:
      tags: [Finance]
      summary: Get service-specific analytics
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Service analytics

  # === Services ===
  /services:
    get:
      tags: [Services]
      summary: Get all services
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all services
    post:
      tags: [Services]
      summary: Create a new service
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "201":
          description: Service created successfully

  /finance/payments:
    get:
      tags: [Finance]
      summary: Get payment history
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema: { type: string, format: date }
        - name: endDate
          in: query
          schema: { type: string, format: date }
        - name: projectId
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Payment history

security:
  - bearerAuth: []
